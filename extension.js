// Generated by CoffeeScript 1.6.3
var Config, Extension, ExtensionUtils, Window, disable, enable, helper, init, keybindings, layouts;

ExtensionUtils = imports.misc.extensionUtils;

Extension = ExtensionUtils.getCurrentExtension();

helper = Extension.imports.helper;

Window = Extension.imports.api.window.Window;

keybindings = Extension.imports.api.keybindings;

Config = Extension.imports.config.config.Config;

layouts = Extension.imports.layouts.layouts.layouts;

init = function() {
  var applyLayout, callback, config, e, keybinding, _ref;
  global.twm = {
    functions: {}
  };
  try {
    config = new Config;
    _ref = config.keybindings;
    for (keybinding in _ref) {
      callback = _ref[keybinding];
      keybindings.add(keybinding, callback);
    }
    keybindings.apply();
    if (typeof config.onStartup === "function") {
      config.onStartup();
    }
    applyLayout = function() {
      var delay, delayTime, wins;
      wins = (new Window()).getAll();
      wins = wins.filter(function(win) {
        return win.wmClass !== 'Gnome-shell';
      });
      wins = wins.filter(function(win) {
        return config.windowsFilter(win);
      });
      wins.forEach(function(win) {
        return win.setDecorated(false);
      });
      delay = function(time, callback) {
        return GLib.timeout_add(GLib.PRIORITY_DEFAULT, time, function() {
          return typeof callback === "function" ? callback() : void 0;
        });
      };
      delayTime = 100;
      return delay(delayTime, function() {
        var areas, avaliableHeight, avaliableWidth, layout, monitor;
        layout = layouts.get("2-column");
        areas = layout(wins.length);
        monitor = Main.layoutManager.primaryMonitor;
        avaliableWidth = monitor.width;
        avaliableHeight = monitor.height - Main.panel.actor.height;
        return wins.forEach(function(win, index) {
          var height, width, x, y, _ref1;
          _ref1 = areas[index], x = _ref1.x, y = _ref1.y, width = _ref1.width, height = _ref1.height;
          x = x * avaliableWidth;
          y = y * avaliableHeight;
          width = width * avaliableWidth;
          height = height * avaliableHeight;
          return win.setArea(x, y, width, height);
        });
      });
    };
  } catch (_error) {
    e = _error;
    global.log(e);
    helper.log(e);
  }
  return false;
};

enable = function() {
  return false;
};

disable = function() {
  return false;
};
