// Generated by CoffeeScript 1.7.1
var Extension, ExtensionUtils, LayoutManager, Main, Window, WindowManager, Wnck, delay, helper, runGjsScript, spawn, spawnSync, wm;

Main = imports.ui.main;

Wnck = imports.gi.Wnck;

ExtensionUtils = imports.misc.extensionUtils;

Extension = ExtensionUtils.getCurrentExtension();

helper = Extension.imports.helper;

WindowManager = Extension.imports.wm.windowManager.WindowManager;

Window = Extension.imports.wm.window.Window;

wm = new WindowManager;

spawn = helper.spawn, spawnSync = helper.spawnSync, delay = helper.delay, runGjsScript = helper.runGjsScript;

LayoutManager = (function() {
  function LayoutManager() {
    this.layouts = {};
    this.layoutOfWorkspace = {};
  }

  LayoutManager.prototype.reapply = function(shouldFocus) {
    var currentLayout;
    currentLayout = this.current();
    if ((currentLayout != null) && currentLayout !== 'float') {
      return this.apply(currentLayout, shouldFocus);
    }
  };

  LayoutManager.prototype.init = function() {
    wm.connect("window-opened", (function(_this) {
      return function(wnckScreen, wnckWindow) {
        var currentWorkspace;
        currentWorkspace = wm.getActiveWorkspace();
        if (wnckWindow.is_visible_on_workspace(currentWorkspace)) {
          return _this.reapply(wnckWindow);
        }
      };
    })(this));
    return wm.connect("window-closed", (function(_this) {
      return function(wnckScreen, wnckWindow) {
        var currentWorkspace;
        currentWorkspace = wm.getActiveWorkspace();
        if (wnckWindow.is_visible_on_workspace(currentWorkspace)) {
          _this.reapply();
        }
        return null;
      };
    })(this));
  };

  LayoutManager.prototype.filter = function(window) {
    return true;
  };


  /*
  Get Layout Func
  
  @param [String] layoutName Layout Name
   */

  LayoutManager.prototype.get = function(layoutName) {
    return this.layouts[layoutName];
  };


  /*
  Set Layout Func
  
  @param [String] layoutName Layout Name
  @param [Function] layoutFunc Layout Function
   */

  LayoutManager.prototype.set = function(layoutName, layoutFunc) {
    return this.layouts[layoutName] = layoutFunc;
  };


  /*
  Unset Layout
  
  @param [String] layoutName Layout Name
   */

  LayoutManager.prototype.unset = function(layoutName) {
    return this.layouts[layoutName] = null;
  };


  /*
  List all avaliable layouts, returns an array like ["2-column", "3-column"]
   */

  LayoutManager.prototype.list = function() {
    var key, layouts, value, _ref;
    layouts = ["float"];
    _ref = this.layouts;
    for (key in _ref) {
      value = _ref[key];
      if (value != null) {
        layouts.push(key);
      }
    }
    return layouts;
  };


  /*
  @private
   */

  LayoutManager.prototype.layoutKeygen = function() {
    var monitor, primaryMonitor;
    monitor = Main.layoutManager.currentMonitor;
    primaryMonitor = Main.layoutManager.primaryMonitor;
    if (monitor === primaryMonitor) {
      return wm.getActiveWorkspace().get_name();
    } else {
      return "Monitor:(" + monitor.x + ", " + monitor.y + ")";
    }
  };


  /*
  Get Layout of current workspace
   */

  LayoutManager.prototype.current = function() {
    global.log(JSON.stringify(this.layoutOfWorkspace));
    return this.layoutOfWorkspace[this.layoutKeygen()];
  };


  /*
  Apply Float Layout
  
  @private
   */

  LayoutManager.prototype.float = function(wnckWindows, activeWindow) {
    var activeWindowXid, height, monitor, width, xids;
    activeWindowXid = activeWindow != null ? activeWindow.get_xid() : null;
    monitor = Main.layoutManager.primaryMonitor;
    width = monitor.width * 2 / 3;
    height = monitor.height * 2 / 3;
    wnckWindows.forEach(function(wnckWindow) {
      return wnckWindow.set_geometry(0, (1 << 2) | (1 << 3), 0, 0, width, height);
    });
    xids = wnckWindows.map(function(wnckWindow) {
      return wnckWindow.get_xid();
    });
    return runGjsScript("set-float", {
      xids: xids,
      activeWindowXid: activeWindowXid
    });
  };


  /*
  Apply Layout
  
  @param [String] layoutName Layout Name
  @param [Function] filter Filter function which takes WnckWindow as param and returns false this window should be ignored
   */

  LayoutManager.prototype.apply = function(layoutName, activeWindow) {
    var activeWindowInfo, areas, avaliableHeight, avaliableWidth, currentWorkspace, layout, monitor, panelHeight, primaryMonitor, refocus, todo, updateWindows, windows, xids;
    if (activeWindow == null) {
      activeWindow = wm.getActiveWindow();
    }
    windows = wm.getWindows();
    currentWorkspace = wm.getActiveWorkspace();
    this.layoutOfWorkspace[this.layoutKeygen()] = layoutName;
    global.layouts = this.layoutOfWorkspace;
    windows = windows.filter(function(wnckWindow) {
      return wnckWindow.is_visible_on_workspace(currentWorkspace);
    });
    monitor = Main.layoutManager.currentMonitor;
    windows = windows.filter(function(wnckWindow) {
      var clientGeometry, height, width, x, xMatch, y, yMatch;
      clientGeometry = wnckWindow.get_client_window_geometry();
      x = clientGeometry[0], y = clientGeometry[1], width = clientGeometry[2], height = clientGeometry[3];
      x = x + width * 0.5;
      y = y + height * 0.5;
      xMatch = (x >= monitor.x) && (x < (monitor.width + monitor.x));
      yMatch = (y >= monitor.y) && (y < (monitor.height + monitor.y));
      return xMatch && yMatch;
    });
    windows.forEach(function(wnckWindow) {
      return global.log(wnckWindow.get_name());
    });
    windows = windows.filter(function(wnckWindow) {
      var _window;
      _window = new Window(wnckWindow);
      return _window.isNormalWindow();
    });
    if (layoutName === 'float') {
      this.float(windows, activeWindow);
      return null;
    }
    xids = windows.map(function(wnckWindow) {
      return wnckWindow.get_xid();
    });
    refocus = function() {
      if (activeWindow != null) {
        return activeWindow.activate(helper.getXServerTimestamp());
      } else {
        return false;
      }
    };
    primaryMonitor = Main.layoutManager.primaryMonitor;
    panelHeight = Main.panel.actor.height;
    avaliableWidth = monitor.width;
    avaliableHeight = monitor.height;
    if (monitor === primaryMonitor) {
      avaliableHeight -= panelHeight;
    }
    layout = this.get(layoutName);
    areas = layout(windows.length);
    activeWindowInfo = null;
    todo = areas.length;
    updateWindows = (function(_this) {
      return function(callback) {
        return windows.forEach(function(win, index) {
          var geometry, height, width, x, y, _ref, _window;
          _ref = areas[index], x = _ref.x, y = _ref.y, width = _ref.width, height = _ref.height;
          x = x * avaliableWidth + monitor.x;
          y = y * avaliableHeight + monitor.y;
          if (monitor === primaryMonitor) {
            y += panelHeight;
          }
          width = width * avaliableWidth;
          height = height * avaliableHeight;
          _window = new Window(win);
          geometry = {
            x: x,
            y: y,
            width: width,
            height: height
          };
          if (win === activeWindow) {
            activeWindowInfo = geometry;
          }
          return _window.setGeometry(geometry, function() {
            todo--;
            if (todo === 0) {
              return typeof callback === "function" ? callback() : void 0;
            }
          });
        });
      };
    })(this);
    return updateWindows(function() {
      var __window;
      refocus();
      __window = new Window(activeWindow);
      return __window.setGeometry(activeWindowInfo, null, true);
    });
  };

  return LayoutManager;

})();
